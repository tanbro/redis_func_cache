# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [main]
    tags: ["*"]
    paths:
      - .github/**
      - src/**
      - tests/**
      - pyproject.toml
  pull_request:
    branches: [main]
    paths:
      - .github/**
      - src/**
      - tests/**
      - pyproject.toml

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Check PEP-440 style version
        id: get-version
        run: |
          PEP440_VERSION=""
          VERSION_PREFIX="v"
          BRANCH_OR_TAG="$(echo ${{ github.event.ref }} | cut -d / -f 3)"
          if [[ "${BRANCH_OR_TAG}" =~ ^v?(([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*(\.?(a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?)$ ]]
          then
            PEP440_VERSION="${BRANCH_OR_TAG#$VERSION_PREFIX}"
          fi
          echo "PEP440_VERSION: ${PEP440_VERSION}"
          echo "version=${PEP440_VERSION}" >> $GITHUB_OUTPUT

  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]

    services:
      redis-standalone:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping | grep PONG"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Cache of Ruff PyTest and MyPY
        uses: actions/cache@v4
        with:
          path: |
            .ruff_cache
            .pytest_cache
            .mypy_cache
          key: cache

      - name: Install the project
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: "0"
        run: uv sync --all-extras --no-dev --group test --group mypy

      - name: Lint check with ruff
        uses: astral-sh/ruff-action@v3

      - name: Static check with mypy
        run: uv run --no-dev mypy

      - name: Run tests
        run: uv run --no-dev pytest -x --cov --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [get-version, unittest]
    if: needs.get-version.outputs.version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build
        run: uv build
      - name: Upload package distributions to artifact
        uses: actions/upload-artifact@v4
        with:
          name: redis_func_cache-dist-${{ needs.get-version.outputs.version }}
          path: dist
          if-no-files-found: error
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: [get-version, build]
    if: needs.get-version.outputs.version != ''

    steps:
      - name: Download package distributions from artifact
        uses: actions/download-artifact@v4
        with:
          name: redis_func_cache-dist-${{needs.get-version.outputs.version}}
          path: dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
