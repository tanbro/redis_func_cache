# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [main]
    tags: ["*"]
    paths:
      - .github/**
      - src/**
      - tests/**
      - pyproject.toml
  pull_request:
    branches: [main]
    paths:
      - .github/**
      - src/**
      - tests/**
      - pyproject.toml

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Check PEP-440 style version
        id: get-version
        run: |
          PEP440_VERSION=""
          VERSION_PREFIX="v"
          BRANCH_OR_TAG="$(echo ${{ github.event.ref }} | cut -d / -f 3)"
          if [[ "${BRANCH_OR_TAG}" =~ ^v?(([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*(\.?(a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?)$ ]]
          then
            PEP440_VERSION="${BRANCH_OR_TAG#$VERSION_PREFIX}"
          fi
          echo "PEP440_VERSION: ${PEP440_VERSION}"
          echo "version=${PEP440_VERSION}" >> $GITHUB_OUTPUT

  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    services:
      redis-standalone:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping | grep PONG"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      redis-cluster-0:
        image: redis:alpine
        options: >-
          --entrypoint sh
          -c "rm -f /tmp/redis-cluster-nodes.conf && redis-server --appendonly no --save '' --cluster-enabled yes --cluster-config-file /tmp/redis-cluster-nodes.conf"
        ports:
          - 6380:6379

      redis-cluster-1:
        image: redis:alpine
        options: >-
          --entrypoint sh
          -c "rm -f /tmp/redis-cluster-nodes.conf && redis-server --appendonly no --save '' --cluster-enabled yes --cluster-config-file /tmp/redis-cluster-nodes.conf"
        ports:
          - 6381:6379

      redis-cluster-2:
        image: redis:alpine
        options: >-
          --entrypoint sh
          -c "rm -f /tmp/redis-cluster-nodes.conf && redis-server --appendonly no --save '' --cluster-enabled yes --cluster-config-file /tmp/redis-cluster-nodes.conf"
        ports:
          - 6382:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . -r tests/requirements.txt

      - name: Wait for Redis Cluster nodes to be ready
        run: |
          timeout 30 sh -c 'until redis-cli -p 6380 ping && redis-cli -p 6381 ping && redis-cli -p 6382 ping; do sleep 1; done'

      - name: Create Redis Cluster
        run: |
          redis-cli --cluster create localhost:6380 localhost:6381 localhost:6382 --cluster-yes

      - name: Wait for Redis Cluster to be ready
        run: |
          timeout 30 sh -c 'until redis-cli -p 6380 --cluster info; do sleep 1; done'

      - name: Run tests
        run: |
          export REDIS_URL=redis://localhost:6379
          export REDIS_CLUSTER_NODES="localhost:6380 localhost:6381 localhost:6382"
          pytest -x --cov --cov-report=xml --junitxml=junit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [get-version, unittest]
    if: needs.get-version.outputs.version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache: pip
      - name: Install builder
        run: pip install build
      - name: Build package distributions
        run: pyproject-build
      - name: Upload package distributions to artifact
        uses: actions/upload-artifact@v4
        with:
          name: redis_func_cache-dist-${{ needs.get-version.outputs.version }}
          path: dist
          if-no-files-found: error
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: [get-version, build]
    if: needs.get-version.outputs.version != ''

    steps:
      - name: Download package distributions from artifact
        uses: actions/download-artifact@v4
        with:
          name: redis_func_cache-dist-${{needs.get-version.outputs.version}}
          path: dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
